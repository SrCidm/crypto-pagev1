{"ast":null,"code":"var _jsxFileName = \"C:\\\\Curso\\\\visualCodeProyectos\\\\crypto-pagev1\\\\crypto-pagev1\\\\src\\\\components\\\\InfoCoin.js\",\n  _s = $RefreshSig$();\nimport Chart from 'chart.js/auto';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { HistoricalChart } from '../config/api';\nimport { Cripto } from '../ContextCripto';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InfoCoin = ({\n  coin\n}) => {\n  _s();\n  const [historicalData, setHistoricalData] = useState(null);\n  const [days, setDays] = useState(30); // Estado para almacenar el número de días seleccionados\n  const {\n    currency\n  } = useContext(Cripto);\n  const fetchHistoricalData = async () => {\n    try {\n      const response = await fetch(HistoricalChart(coin.SYMBOL, currency, days));\n      const responseData = await response.json();\n      setHistoricalData(responseData.Data.Data);\n    } catch (error) {\n      console.error('Error fetching historical data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchHistoricalData();\n    // eslint-disable-next-line\n  }, [coin.SYMBOL, currency, days]); // Se ejecuta nuevamente cuando se cambia el número de días\n\n  const generateChartData = () => {\n    if (!historicalData) return {};\n    const labels = historicalData.map(item => item.time);\n    const data = historicalData.map(item => item.high);\n    return {\n      labels: labels,\n      datasets: [{\n        label: 'Crypto Price',\n        data: data,\n        fill: false,\n        borderColor: 'rgb(0, 150, 250)',\n        tension: 1\n      }]\n    };\n  };\n  const handleDaysChange = newDays => {\n    setDays(newDays);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        fontWeight: \"bold\",\n        fontFamily: \"monospace\"\n      },\n      children: [\"Chart of \", coin.SYMBOL]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => handleDaysChange(1),\n        disabled: days === 1 // Botón \"Today\"\n        ,\n        children: \"Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        he: true,\n        variant: \"contained\",\n        onClick: () => handleDaysChange(7),\n        disabled: days === 7 // Botón \"Last 7 days\"\n        ,\n        children: \"Last 7 days\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => handleDaysChange(30),\n        disabled: days === 30 // Botón \"Last 30 days\"\n        ,\n        children: \"Last 30 days\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), historicalData && /*#__PURE__*/_jsxDEV(Line, {\n      data: generateChartData(),\n      height: 600,\n      width: 1200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(InfoCoin, \"/r7/nAnpoGamczYvtq5PX0qNNpg=\");\n_c = InfoCoin;\nexport default InfoCoin;\n\n// //improvisando ver si se puede colocar un Order book\n// import React, { useState, useEffect, useContext } from 'react';\n// import { Chart } from 'chart.js/auto';\n// import { HistoricalChart } from '../config/api';\n// //import { Line } from 'react-chartjs-2';\n// import { Cripto } from '../ContextCripto';\n\n// const InfoCoin = ({coin}) => {\n//   const [data, setData] = useState([]);\n//   const {currency, setCurrency} = useContext(Cripto);\n\n//   console.log(currency);\n\n//   const fetchData = async () => {\n//     const response = await fetch(HistoricalChart(coin.SYMBOL,currency));\n//     const responseData = await response.json();\n//     setData(responseData.data);\n//   };\n\n//   useEffect(() => {\n//     fetchData();\n//     // eslint-disable-next-line\n//   }, [coin,currency]);\n\n//   console.log(coin);\n\n//   return (\n//     <div style={{ width:\"50%\" }}>\n//       <h2 style={{textAlign:\"center\"}}>{coin.SYMBOL}</h2>\n//       <div style={{ textAlign: \"center\" }}>\n\n//           <h3>Order Book</h3>\n//           <p>Aquí se mostrará información del order book.</p>\n//         </div>\n//     </div>\n//   );\n// };\n// export default InfoCoin;\n\n// tratando de arreglar el codigo del indu pero en el estilo que llevo\n// import React, { useState, useEffect, useContext } from 'react';\n// import { Line } from 'react-chartjs-2';\n// import { HistoricalChart } from '../config/api';\n// import { ThemeProvider } from '@emotion/react';\n// import { CircularProgress, createTheme } from '@mui/material';\n// import { makeStyles } from '@mui/styles';\n// import { Cripto } from '../ContextCripto';\n\n// const InfoCoin = ({coin}) => {\n//   const [historicData, setHistoricData] = useState();\n//   const [days, setDays] = useState(1);\n//   const { currency } = useContext(Cripto);\n//   const [flag,setflag] = useState(false);\n\n//   const useStyles = makeStyles((theme) => ({\n//     container: {\n//       width: \"75%\",\n//       display: \"flex\",\n//       flexDirection: \"column\",\n//       alignItems: \"center\",\n//       justifyContent: \"center\",\n//       marginTop: 25,\n//       padding: 40,\n//       [theme.breakpoints.down(\"md\")]: {\n//         width: \"100%\",\n//         marginTop: 0,\n//         padding: 20,\n//         paddingTop: 0,\n//       },\n//     },\n//   }));\n\n//   const classes = useStyles();\n\n//   const fetchHistoricData = async () => {\n//     const response = await fetch(HistoricalChart(coin, currency));\n//     const {data} = await response.json();\n//     setflag(true);\n//     console.log(data);\n//     setHistoricData(data);\n//   };\n\n//   console.log(coin.SYMBOL);\n\n//   useEffect(() => {\n//     fetchHistoricData();\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [days]);\n\n//   const darkTheme = createTheme({\n//     palette: {\n//       primary: {\n//         main: \"#fff\",\n//       },\n//       type: \"dark\",\n//     },\n//   });\n//   return (\n//     <ThemeProvider theme={darkTheme}>\n//       <div className={classes.container}>\n//         {!historicData | flag===false ? (\n//           <CircularProgress\n//             style={{ color: \"rgb(0, 150, 250)\" }}\n//             size={250}\n//             thickness={1}\n//           />\n//         ) : (\n//           <>\n//             <Line\n//               data={{\n//                 labels: historicData.map((coin) => {\n//                   let date = new Date(coin[0]);\n//                   let time =\n//                     date.getHours() > 12\n//                       ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n//                       : `${date.getHours()}:${date.getMinutes()} AM`;\n//                   return days === 1 ? time : date.toLocaleDateString();\n//                 }),\n\n//                 datasets: [\n//                   {\n//                     data: historicData.map((coin) => coin[1]),\n//                     label: `Price ( Past ${days} Days ) in ${currency}`,\n//                     borderColor: \"#EEBC1D\",\n//                   },\n//                 ],\n//               }}\n//               options={{\n//                 elements: {\n//                   point: {\n//                     radius: 1,\n//                   },\n//                 },\n//               }}\n//             />\n//           </>\n//         )}\n//       </div>\n//     </ThemeProvider>\n//   );\n// };\n// export default InfoCoin;\n\n// BASICO BASICO mostrando informacion total de coin\n// import React, { useState, useEffect } from 'react';\n// import { Chart } from 'chart.js/auto'; // Asegúrate de importar Chart.js correctamente\n// import { HistoryChart } from '../config/api';\n\n// const InfoCoin = ({ coin, currency }) => {\n//   const [data, setData] = useState([]); // Almacena los datos de la API\n//   const [chart, setChart] = useState(null); // Almacena la referencia al gráfico\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(HistoryChart(coin, currency));\n//         const responseData = await response.json();\n//         setData(responseData.data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, [coin, currency]); // Solo coin y currency como dependencias\n//    // coin, currency y chart deben mantenerse como dependencias\n\n//   console.log(coin);\n\n//   return (\n//     <div style={{ width:\"50%\" }}>\n//       <h2 style={{textAlign:\"center\"}}>{coin.SYMBOL}{currency}</h2>\n//         <div style={{textAlign:\"center\"}}>\n//           <h3>Order Book</h3>\n//           <p>Aquí se mostrará información del order book.</p>\n//         </div>\n//     </div>\n//   );\n// };\n// export default InfoCoin;\n\n//EL DEL INDU problemas con el react-chartjs2\n// import React, { useContext, useEffect, useState } from 'react';\n// import { Cripto } from '../ContextCripto';\n// import { HistoryChart } from '../config/api';\n// import { CircularProgress, LinearProgress, ThemeProvider, createTheme } from '@mui/material';\n// import { makeStyles } from '@mui/styles';\n// import  Chart  from 'chart.js/auto';\n\n// const InfoCoin = ({ coin }) => {\n//   const [histData, setHistData] = useState();\n//   const [days, setDays] = useState(1);\n//   const { currency, symbol } = useContext(Cripto);\n//   const [loading, setLoading] = useState(false);\n\n//   const fetchHistoryData = async () => {\n//     setLoading(true);\n//     try {\n//       const response = await fetch(HistoryChart(coin.SYMBOL, days, currency));\n//       const data = await response.json();\n//       setHistData(data);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchHistoryData();\n//   }, [days, currency]);\n\n//   const darkTheme = createTheme({\n//     palette: {\n//       primary: {\n//         main: \"#fff\",\n//       },\n//       type: \"dark\",\n//     },\n//   });\n\n//   const useStyles = makeStyles(() => ({\n//     container: {\n//       width: \"75%\",\n//       display: \"flex\",\n//       flexDirection: \"column\",\n//       alignItems: \"center\",\n//       justifyContent: \"center\",\n//       marginTop: 25,\n//       padding: 40,\n//     },\n//     lineChart: {\n//       width: \"100%\",\n//       height: \"300px\" // Ajusta la altura del gráfico según lo necesites\n//     }\n//   }));\n\n//   const classes = useStyles();\n\n//   useEffect(() => {\n//     if (histData && histData.Data && histData.Data.Data) {\n//       const chartData = {\n//         labels: histData.Data.Data.map(coin => coin.time), // Ajusta según tus datos reales\n//         datasets: [\n//           {\n//             label: 'Precio de la moneda',\n//             data: histData.Data.Data.map(coin => coin.close), // Ajusta según tus datos reales\n//             backgroundColor: 'rgba(0, 150, 250, 0.2)',\n//             borderColor: 'rgba(0, 150, 250, 1)',\n//             borderWidth: 1\n//           }\n//         ]\n//       };\n\n//       const ctx = document.getElementById('coinChart').getContext('2d');\n//       new Chart(ctx, {\n//         type: 'line',\n//         data: chartData,\n//         options: {\n//           responsive: true,\n//           maintainAspectRatio: false\n//         }\n//       });\n//     }\n//   }, [histData]);\n\n//   return (\n//     <ThemeProvider theme={darkTheme}>\n//       <div className={classes.container}>\n//         {loading && <LinearProgress style={{ backgroundColor: \"rgb(0, 150, 250)\" }} />}\n//         {!histData ? (\n//           <CircularProgress style={{ color: \"rgb(0, 150, 250)\"}} size={250} thickness={1} />\n//         ) : (!histData.Data || !histData.Data.Data ? (\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n//             <CircularProgress style={{ color: \"rgb(0, 150, 250)\" }} size={250} thickness={1} />\n//           </div>\n//         ) : (\n//           <div className={classes.lineChart}>\n//             <canvas id=\"coinChart\" />\n//           </div>\n//         ))}\n//       </div>\n//     </ThemeProvider>\n//   );\n// };\n// export default InfoCoin;\nvar _c;\n$RefreshReg$(_c, \"InfoCoin\");","map":{"version":3,"names":["Chart","React","useState","useEffect","useContext","Line","HistoricalChart","Cripto","Button","jsxDEV","_jsxDEV","InfoCoin","coin","_s","historicalData","setHistoricalData","days","setDays","currency","fetchHistoricalData","response","fetch","SYMBOL","responseData","json","Data","error","console","generateChartData","labels","map","item","time","data","high","datasets","label","fill","borderColor","tension","handleDaysChange","newDays","children","style","fontWeight","fontFamily","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","disabled","he","height","width","_c","$RefreshReg$"],"sources":["C:/Curso/visualCodeProyectos/crypto-pagev1/crypto-pagev1/src/components/InfoCoin.js"],"sourcesContent":["import Chart from 'chart.js/auto';\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { HistoricalChart } from '../config/api';\r\nimport { Cripto } from '../ContextCripto';\r\nimport { Button } from '@mui/material';\r\n\r\nconst InfoCoin = ({ coin }) => {\r\n  const [historicalData, setHistoricalData] = useState(null);\r\n  const [days, setDays] = useState(30); // Estado para almacenar el número de días seleccionados\r\n  const { currency } = useContext(Cripto);\r\n\r\n  const fetchHistoricalData = async () => {\r\n    try {\r\n      const response = await fetch(HistoricalChart(coin.SYMBOL, currency, days));\r\n      const responseData = await response.json();\r\n      setHistoricalData(responseData.Data.Data);\r\n    } catch (error) {\r\n      console.error('Error fetching historical data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchHistoricalData();\r\n    // eslint-disable-next-line\r\n  }, [coin.SYMBOL, currency, days]); // Se ejecuta nuevamente cuando se cambia el número de días\r\n\r\n  const generateChartData = () => {\r\n    if (!historicalData) return {};\r\n\r\n    const labels = historicalData.map(item => item.time);\r\n    const data = historicalData.map(item => item.high);\r\n\r\n    return {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          label: 'Crypto Price',\r\n          data: data,\r\n          fill: false,\r\n          borderColor: 'rgb(0, 150, 250)',\r\n          tension: 1 \r\n        }\r\n      ]\r\n    };\r\n  };\r\n\r\n  const handleDaysChange = (newDays) => {\r\n    setDays(newDays);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 style={{ fontWeight: \"bold\", fontFamily: \"monospace\" }}>Chart of {coin.SYMBOL}</h2>\r\n      <div>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => handleDaysChange(1)}\r\n          disabled={days === 1} // Botón \"Today\"\r\n        >\r\n          Today\r\n        </Button>\r\n        <Button he\r\n          variant=\"contained\"\r\n          onClick={() => handleDaysChange(7)}\r\n          disabled={days === 7} // Botón \"Last 7 days\"\r\n        >\r\n          Last 7 days\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => handleDaysChange(30)}\r\n          disabled={days === 30} // Botón \"Last 30 days\"\r\n        >\r\n          Last 30 days\r\n        </Button>\r\n      </div>\r\n      {historicalData && (\r\n        <Line data={generateChartData()} height={600} width={1200} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoCoin;\r\n\r\n// //improvisando ver si se puede colocar un Order book\r\n// import React, { useState, useEffect, useContext } from 'react';\r\n// import { Chart } from 'chart.js/auto';\r\n// import { HistoricalChart } from '../config/api';\r\n// //import { Line } from 'react-chartjs-2';\r\n// import { Cripto } from '../ContextCripto';\r\n\r\n// const InfoCoin = ({coin}) => {\r\n//   const [data, setData] = useState([]);\r\n//   const {currency, setCurrency} = useContext(Cripto);\r\n  \r\n//   console.log(currency);\r\n  \r\n//   const fetchData = async () => {\r\n//     const response = await fetch(HistoricalChart(coin.SYMBOL,currency));\r\n//     const responseData = await response.json();\r\n//     setData(responseData.data);\r\n//   };\r\n\r\n\r\n//   useEffect(() => {\r\n//     fetchData();\r\n//     // eslint-disable-next-line\r\n//   }, [coin,currency]);\r\n  \r\n//   console.log(coin);\r\n  \r\n//   return (\r\n//     <div style={{ width:\"50%\" }}>\r\n//       <h2 style={{textAlign:\"center\"}}>{coin.SYMBOL}</h2>\r\n//       <div style={{ textAlign: \"center\" }}>\r\n        \r\n//           <h3>Order Book</h3>\r\n//           <p>Aquí se mostrará información del order book.</p>\r\n//         </div>\r\n//     </div>\r\n//   );\r\n// };\r\n// export default InfoCoin;\r\n\r\n\r\n// tratando de arreglar el codigo del indu pero en el estilo que llevo\r\n// import React, { useState, useEffect, useContext } from 'react';\r\n// import { Line } from 'react-chartjs-2';\r\n// import { HistoricalChart } from '../config/api';\r\n// import { ThemeProvider } from '@emotion/react';\r\n// import { CircularProgress, createTheme } from '@mui/material';\r\n// import { makeStyles } from '@mui/styles';\r\n// import { Cripto } from '../ContextCripto';\r\n\r\n// const InfoCoin = ({coin}) => {\r\n//   const [historicData, setHistoricData] = useState();\r\n//   const [days, setDays] = useState(1);\r\n//   const { currency } = useContext(Cripto);\r\n//   const [flag,setflag] = useState(false);\r\n\r\n//   const useStyles = makeStyles((theme) => ({\r\n//     container: {\r\n//       width: \"75%\",\r\n//       display: \"flex\",\r\n//       flexDirection: \"column\",\r\n//       alignItems: \"center\",\r\n//       justifyContent: \"center\",\r\n//       marginTop: 25,\r\n//       padding: 40,\r\n//       [theme.breakpoints.down(\"md\")]: {\r\n//         width: \"100%\",\r\n//         marginTop: 0,\r\n//         padding: 20,\r\n//         paddingTop: 0,\r\n//       },\r\n//     },\r\n//   }));\r\n\r\n//   const classes = useStyles();\r\n\r\n//   const fetchHistoricData = async () => {\r\n//     const response = await fetch(HistoricalChart(coin, currency));\r\n//     const {data} = await response.json();\r\n//     setflag(true);\r\n//     console.log(data);\r\n//     setHistoricData(data);\r\n//   };\r\n\r\n//   console.log(coin.SYMBOL);\r\n\r\n//   useEffect(() => {\r\n//     fetchHistoricData();\r\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n//   }, [days]);\r\n\r\n//   const darkTheme = createTheme({\r\n//     palette: {\r\n//       primary: {\r\n//         main: \"#fff\",\r\n//       },\r\n//       type: \"dark\",\r\n//     },\r\n//   });\r\n//   return (\r\n//     <ThemeProvider theme={darkTheme}>\r\n//       <div className={classes.container}>\r\n//         {!historicData | flag===false ? (\r\n//           <CircularProgress\r\n//             style={{ color: \"rgb(0, 150, 250)\" }}\r\n//             size={250}\r\n//             thickness={1}\r\n//           />\r\n//         ) : (\r\n//           <>\r\n//             <Line\r\n//               data={{\r\n//                 labels: historicData.map((coin) => {\r\n//                   let date = new Date(coin[0]);\r\n//                   let time =\r\n//                     date.getHours() > 12\r\n//                       ? `${date.getHours() - 12}:${date.getMinutes()} PM`\r\n//                       : `${date.getHours()}:${date.getMinutes()} AM`;\r\n//                   return days === 1 ? time : date.toLocaleDateString();\r\n//                 }),\r\n\r\n//                 datasets: [\r\n//                   {\r\n//                     data: historicData.map((coin) => coin[1]),\r\n//                     label: `Price ( Past ${days} Days ) in ${currency}`,\r\n//                     borderColor: \"#EEBC1D\",\r\n//                   },\r\n//                 ],\r\n//               }}\r\n//               options={{\r\n//                 elements: {\r\n//                   point: {\r\n//                     radius: 1,\r\n//                   },\r\n//                 },\r\n//               }}\r\n//             />\r\n//           </>\r\n//         )}\r\n//       </div>\r\n//     </ThemeProvider>\r\n//   );\r\n// };\r\n// export default InfoCoin;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// BASICO BASICO mostrando informacion total de coin\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Chart } from 'chart.js/auto'; // Asegúrate de importar Chart.js correctamente\r\n// import { HistoryChart } from '../config/api';\r\n\r\n// const InfoCoin = ({ coin, currency }) => {\r\n//   const [data, setData] = useState([]); // Almacena los datos de la API\r\n//   const [chart, setChart] = useState(null); // Almacena la referencia al gráfico\r\n  \r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const response = await fetch(HistoryChart(coin, currency));\r\n//         const responseData = await response.json();\r\n//         setData(responseData.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n  \r\n//     fetchData();\r\n//   }, [coin, currency]); // Solo coin y currency como dependencias\r\n//    // coin, currency y chart deben mantenerse como dependencias\r\n  \r\n//   console.log(coin);\r\n  \r\n//   return (\r\n//     <div style={{ width:\"50%\" }}>\r\n//       <h2 style={{textAlign:\"center\"}}>{coin.SYMBOL}{currency}</h2>\r\n//         <div style={{textAlign:\"center\"}}>\r\n//           <h3>Order Book</h3>\r\n//           <p>Aquí se mostrará información del order book.</p>\r\n//         </div>\r\n//     </div>\r\n//   );\r\n// };\r\n// export default InfoCoin;\r\n\r\n\r\n\r\n\r\n//EL DEL INDU problemas con el react-chartjs2\r\n// import React, { useContext, useEffect, useState } from 'react';\r\n// import { Cripto } from '../ContextCripto';\r\n// import { HistoryChart } from '../config/api';\r\n// import { CircularProgress, LinearProgress, ThemeProvider, createTheme } from '@mui/material';\r\n// import { makeStyles } from '@mui/styles';\r\n// import  Chart  from 'chart.js/auto';\r\n\r\n// const InfoCoin = ({ coin }) => {\r\n//   const [histData, setHistData] = useState();\r\n//   const [days, setDays] = useState(1);\r\n//   const { currency, symbol } = useContext(Cripto);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const fetchHistoryData = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       const response = await fetch(HistoryChart(coin.SYMBOL, days, currency));\r\n//       const data = await response.json();\r\n//       setHistData(data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching data:', error);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchHistoryData();\r\n//   }, [days, currency]);\r\n  \r\n//   const darkTheme = createTheme({\r\n//     palette: {\r\n//       primary: {\r\n//         main: \"#fff\",\r\n//       },\r\n//       type: \"dark\",\r\n//     },\r\n//   });\r\n  \r\n//   const useStyles = makeStyles(() => ({\r\n//     container: {\r\n//       width: \"75%\",\r\n//       display: \"flex\",\r\n//       flexDirection: \"column\",\r\n//       alignItems: \"center\",\r\n//       justifyContent: \"center\",\r\n//       marginTop: 25,\r\n//       padding: 40,\r\n//     },\r\n//     lineChart: {\r\n//       width: \"100%\",\r\n//       height: \"300px\" // Ajusta la altura del gráfico según lo necesites\r\n//     }\r\n//   }));\r\n\r\n//   const classes = useStyles();\r\n\r\n//   useEffect(() => {\r\n//     if (histData && histData.Data && histData.Data.Data) {\r\n//       const chartData = {\r\n//         labels: histData.Data.Data.map(coin => coin.time), // Ajusta según tus datos reales\r\n//         datasets: [\r\n//           {\r\n//             label: 'Precio de la moneda',\r\n//             data: histData.Data.Data.map(coin => coin.close), // Ajusta según tus datos reales\r\n//             backgroundColor: 'rgba(0, 150, 250, 0.2)',\r\n//             borderColor: 'rgba(0, 150, 250, 1)',\r\n//             borderWidth: 1\r\n//           }\r\n//         ]\r\n//       };\r\n\r\n//       const ctx = document.getElementById('coinChart').getContext('2d');\r\n//       new Chart(ctx, {\r\n//         type: 'line',\r\n//         data: chartData,\r\n//         options: {\r\n//           responsive: true,\r\n//           maintainAspectRatio: false\r\n//         }\r\n//       });\r\n//     }\r\n//   }, [histData]);\r\n\r\n//   return (\r\n//     <ThemeProvider theme={darkTheme}>\r\n//       <div className={classes.container}>\r\n//         {loading && <LinearProgress style={{ backgroundColor: \"rgb(0, 150, 250)\" }} />}\r\n//         {!histData ? (\r\n//           <CircularProgress style={{ color: \"rgb(0, 150, 250)\"}} size={250} thickness={1} />\r\n//         ) : (!histData.Data || !histData.Data.Data ? (\r\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\r\n//             <CircularProgress style={{ color: \"rgb(0, 150, 250)\" }} size={250} thickness={1} />\r\n//           </div>\r\n//         ) : (\r\n//           <div className={classes.lineChart}>\r\n//             <canvas id=\"coinChart\" />\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </ThemeProvider>\r\n//   );\r\n// };\r\n// export default InfoCoin;"],"mappings":"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AAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EACLnC,cAAc,iBACbJ,OAAA,CAACL,IAAI;MAAC4B,IAAI,EAAEL,iBAAiB,CAAC,CAAE;MAAC0B,MAAM,EAAE,GAAI;MAACC,KAAK,EAAE;IAAK;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC7D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpC,EAAA,CA3EIF,QAAQ;AAAA6C,EAAA,GAAR7C,QAAQ;AA6Ed,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}