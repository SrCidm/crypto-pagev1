{"ast":null,"code":"var _jsxFileName = \"C:\\\\Curso\\\\visualCodeProyectos\\\\crypto-pagev1\\\\crypto-pagev1\\\\src\\\\components\\\\InfoCoin.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart } from 'chart.js'; //Librería de gráficos\nimport { HistoryChart } from '../config/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InfoCoin = ({\n  coin,\n  currency\n}) => {\n  _s();\n  const [data, setData] = useState([]); //Almacena los datos de la API\n  const [chart, setChart] = useState(null); //Almacena la referencia al gráfico\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(HistoryChart(coin, currency));\n        const responseData = await response.json();\n        setData(responseData.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [coin, currency]);\n  useEffect(() => {\n    if (coin.length > 0) {\n      const ctx = document.getElementById('chart').getContext('2d');\n      const myChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: data.map(d => d.time),\n          datasets: [{\n            label: `${coin.SYMBOL} (${currency})`,\n            data: coin.map(d => d.close)\n          }]\n        }\n      });\n      setChart(myChart);\n    }\n  }, [data, coin, currency]); // Agregar fetchData a la lista de dependencias\n  ;\n  console.log(coin.length);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [coin.SYMBOL, currency]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"chart\",\n      width: \"40px\",\n      height: \"200\",\n      style: {\n        margin: \"600px 30px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), chart && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Order Book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Aqu\\xED se mostrar\\xE1 informaci\\xF3n del order book.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(InfoCoin, \"Pg4PRYLtZwR01pobSXf/egQPh+8=\");\n_c = InfoCoin;\nexport default InfoCoin;\n\n// import React, { useContext, useEffect, useState } from 'react'\n// import { Cripto } from '../ContextCripto';\n// import { HistoryChart } from '../config/api';\n// import { CircularProgress, LinearProgress, ThemeProvider, createTheme } from '@mui/material';\n// import { makeStyles } from '@mui/styles';\n\n// const InfoCoin = ({coin}) => {\n//   const [histData, setHistData] = useState();\n//   const [days, setDays] = useState(1);\n//   const { currency, symbol } = useContext(Cripto);\n//   const [loading, setLoading] = useState(false);\n\n//   const fetchHistoryData = async () => {\n//     setLoading(true); // Marcar como cargando antes de hacer la solicitud\n//     try {\n//       const response = await fetch(HistoryChart(coin.SYMBOL, days, currency));\n//       const data = await response.json();\n//       setHistData(data);\n//     } catch (error) {\n//       console.error('Error fetching la data:', error);\n//       // Aquí puedes manejar el error de la manera que desees\n//     } finally {\n//       setLoading(false); // Marcar como no cargando después de la solicitud, independientemente del resultado\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchHistoryData();\n//     // eslint-disable-next-line\n//   }, [days, currency]);\n\n//   const darkTheme = createTheme({\n//       palette: {\n//           primary: {\n//               main: \"#fff\",\n//       },\n//       type: \"dark\",\n//     },\n//   });\n//   const useStyles = makeStyles(() => ({\n//       container: {\n//       width: \"75%\",\n//       display: \"flex\",\n//       flexDirection: \"column\",\n//       alignItems: \"center\",\n//       justifyContent: \"center\",\n//       marginTop: 25,\n//       padding: 40,\n//     },\n//   }));\n\n//   const classes = useStyles\n\n//   console.log(histData)\n\n//   return (\n//     <ThemeProvider theme={darkTheme}>\n//       <div className={classes.container}>\n//         {loading && <LinearProgress style={{ backgroundColor: \"rgb(0, 150, 250)\" }} />}\n//         {!histData ? (\n//           <CircularProgress style={{ color: \"rgb(0, 150, 250)\"}} size={250} thickness={1} />\n//         ) : (!histData.Data || !histData.Data.Data ? (\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n//             <CircularProgress style={{ color: \"rgb(0, 150, 250)\" }} size={250} thickness={1} />\n//           </div>\n//         ) : (\n//           <div className={classes.lineChart}>\n//             <svg viewBox={`0 0 ${histData.Data.Data.length * 50} 300`}>\n//               <polyline\n//                 className={classes.line}\n//                 points={histData.Data.Data.map((coin, index) => `${ 50},${300}`).join(' ')}\n//               />\n//             </svg>\n//           </div>\n//         ))}\n//       </div>\n//     </ThemeProvider>\n//   )\n// }\n\n// export default InfoCoin;\nvar _c;\n$RefreshReg$(_c, \"InfoCoin\");","map":{"version":3,"names":["React","useState","useEffect","Chart","HistoryChart","jsxDEV","_jsxDEV","InfoCoin","coin","currency","_s","data","setData","chart","setChart","fetchData","response","fetch","responseData","json","error","console","length","ctx","document","getElementById","getContext","myChart","type","labels","map","d","time","datasets","label","SYMBOL","close","log","children","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","style","margin","_c","$RefreshReg$"],"sources":["C:/Curso/visualCodeProyectos/crypto-pagev1/crypto-pagev1/src/components/InfoCoin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Chart } from 'chart.js'; //Librería de gráficos\r\nimport { HistoryChart } from '../config/api';\r\n\r\nconst InfoCoin = ({ coin, currency }) => {\r\n  const [data, setData] = useState([]); //Almacena los datos de la API\r\n  const [chart, setChart] = useState(null); //Almacena la referencia al gráfico\r\n  \r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(HistoryChart(coin, currency));\r\n        const responseData = await response.json();\r\n        setData(responseData.data);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, [coin, currency]);\r\n  \r\n  useEffect(() => {\r\n    if (coin.length > 0) {\r\n      const ctx = document.getElementById('chart').getContext('2d');\r\n      const myChart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: data.map(d => d.time),\r\n          datasets: [{\r\n            label: `${coin.SYMBOL} (${currency})`,\r\n            data: coin.map(d => d.close),\r\n          }],\r\n        },\r\n      });\r\n      setChart(myChart);\r\n    }\r\n  }, [data, coin, currency]); // Agregar fetchData a la lista de dependencias\r\n  ;\r\n  console.log(coin.length)\r\n  return (\r\n    <div >\r\n      \r\n      <h2>{coin.SYMBOL}{currency}</h2>\r\n      <canvas id=\"chart\" width=\"40px\" height=\"200\"style={{margin:\"600px 30px\"}}></canvas>\r\n      {chart && (\r\n        <div>\r\n          <h3>Order Book</h3>\r\n          <p>Aquí se mostrará información del order book.</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default InfoCoin;\r\n\r\n// import React, { useContext, useEffect, useState } from 'react'\r\n// import { Cripto } from '../ContextCripto';\r\n// import { HistoryChart } from '../config/api';\r\n// import { CircularProgress, LinearProgress, ThemeProvider, createTheme } from '@mui/material';\r\n// import { makeStyles } from '@mui/styles';\r\n\r\n// const InfoCoin = ({coin}) => {\r\n//   const [histData, setHistData] = useState();\r\n//   const [days, setDays] = useState(1);\r\n//   const { currency, symbol } = useContext(Cripto);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n\r\n//   const fetchHistoryData = async () => {\r\n//     setLoading(true); // Marcar como cargando antes de hacer la solicitud\r\n//     try {\r\n//       const response = await fetch(HistoryChart(coin.SYMBOL, days, currency));\r\n//       const data = await response.json();\r\n//       setHistData(data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching la data:', error);\r\n//       // Aquí puedes manejar el error de la manera que desees\r\n//     } finally {\r\n//       setLoading(false); // Marcar como no cargando después de la solicitud, independientemente del resultado\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchHistoryData();\r\n//     // eslint-disable-next-line\r\n//   }, [days, currency]);\r\n  \r\n//   const darkTheme = createTheme({\r\n//       palette: {\r\n//           primary: {\r\n//               main: \"#fff\",\r\n//       },\r\n//       type: \"dark\",\r\n//     },\r\n//   });\r\n//   const useStyles = makeStyles(() => ({\r\n//       container: {\r\n//       width: \"75%\",\r\n//       display: \"flex\",\r\n//       flexDirection: \"column\",\r\n//       alignItems: \"center\",\r\n//       justifyContent: \"center\",\r\n//       marginTop: 25,\r\n//       padding: 40,\r\n//     },\r\n//   }));\r\n\r\n//   const classes = useStyles\r\n\r\n//   console.log(histData)\r\n  \r\n\r\n//   return (\r\n//     <ThemeProvider theme={darkTheme}>\r\n//       <div className={classes.container}>\r\n//         {loading && <LinearProgress style={{ backgroundColor: \"rgb(0, 150, 250)\" }} />}\r\n//         {!histData ? (\r\n//           <CircularProgress style={{ color: \"rgb(0, 150, 250)\"}} size={250} thickness={1} />\r\n//         ) : (!histData.Data || !histData.Data.Data ? (\r\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\r\n//             <CircularProgress style={{ color: \"rgb(0, 150, 250)\" }} size={250} thickness={1} />\r\n//           </div>\r\n//         ) : (\r\n//           <div className={classes.lineChart}>\r\n//             <svg viewBox={`0 0 ${histData.Data.Data.length * 50} 300`}>\r\n//               <polyline\r\n//                 className={classes.line}\r\n//                 points={histData.Data.Data.map((coin, index) => `${ 50},${300}`).join(' ')}\r\n//               />\r\n//             </svg>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </ThemeProvider>\r\n//   )\r\n// }\r\n\r\n// export default InfoCoin;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}