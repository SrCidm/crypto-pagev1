{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chart from 'chart.js'; //Librería de gráficos\nimport CryptoCompare from 'cryptocompare'; //API de CryptoCompare\n\nconst InfoCoin = ({\n  coin,\n  currency\n}) => {\n  _s();\n  const [data, setData] = useState([]); //Almacena los datos de la API\n  const [chart, setChart] = useState(null); //Almacena la referencia al gráfico\n\n  useEffect(() => {\n    // Carga los datos al renderizar el componente\n    const fetchData = async () => {\n      const response = await CryptoCompare.getHistoricalData(coin, currency, {\n        limit: 200 //Cantidad de puntos\n      });\n      setData(response.Data);\n    };\n    fetchData();\n\n    // Crea el gráfico al renderizar el componente\n    const createChart = () => {\n      const ctx = document.getElementById('chart').getContext('2d');\n      const myChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: data.map(d => d.time),\n          datasets: [{\n            label: coin,\n            data: data.map(d => d.close)\n          }]\n        }\n      });\n      setChart(myChart);\n    };\n    if (data.length > 0) {\n      createChart();\n    }\n  }, [data, coin, currency]);\n};\n_s(InfoCoin, \"tkkfKqgp4cNQBTsNin0zDxmUYsc=\");\n_c = InfoCoin;\nexport default InfoCoin;\n\n// import React, { useContext, useEffect, useState } from 'react'\n// import { Cripto } from '../ContextCripto';\n// import { HistoryChart } from '../config/api';\n// import { CircularProgress, LinearProgress, ThemeProvider, createTheme } from '@mui/material';\n// import { makeStyles } from '@mui/styles';\n\n// const InfoCoin = ({coin}) => {\n//   const [histData, setHistData] = useState();\n//   const [days, setDays] = useState(1);\n//   const { currency, symbol } = useContext(Cripto);\n//   const [loading, setLoading] = useState(false);\n\n//   const fetchHistoryData = async () => {\n//     setLoading(true); // Marcar como cargando antes de hacer la solicitud\n//     try {\n//       const response = await fetch(HistoryChart(coin.SYMBOL, days, currency));\n//       const data = await response.json();\n//       setHistData(data);\n//     } catch (error) {\n//       console.error('Error fetching la data:', error);\n//       // Aquí puedes manejar el error de la manera que desees\n//     } finally {\n//       setLoading(false); // Marcar como no cargando después de la solicitud, independientemente del resultado\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchHistoryData();\n//     // eslint-disable-next-line\n//   }, [days, currency]);\n\n//   const darkTheme = createTheme({\n//       palette: {\n//           primary: {\n//               main: \"#fff\",\n//       },\n//       type: \"dark\",\n//     },\n//   });\n//   const useStyles = makeStyles(() => ({\n//       container: {\n//       width: \"75%\",\n//       display: \"flex\",\n//       flexDirection: \"column\",\n//       alignItems: \"center\",\n//       justifyContent: \"center\",\n//       marginTop: 25,\n//       padding: 40,\n//     },\n//   }));\n\n//   const classes = useStyles\n\n//   console.log(histData)\n\n//   return (\n//     <ThemeProvider theme={darkTheme}>\n//       <div className={classes.container}>\n//         {loading && <LinearProgress style={{ backgroundColor: \"rgb(0, 150, 250)\" }} />}\n//         {!histData ? (\n//           <CircularProgress style={{ color: \"rgb(0, 150, 250)\"}} size={250} thickness={1} />\n//         ) : (!histData.Data || !histData.Data.Data ? (\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n//             <CircularProgress style={{ color: \"rgb(0, 150, 250)\" }} size={250} thickness={1} />\n//           </div>\n//         ) : (\n//           <div className={classes.lineChart}>\n//             <svg viewBox={`0 0 ${histData.Data.Data.length * 50} 300`}>\n//               <polyline\n//                 className={classes.line}\n//                 points={histData.Data.Data.map((coin, index) => `${ 50},${300}`).join(' ')}\n//               />\n//             </svg>\n//           </div>\n//         ))}\n//       </div>\n//     </ThemeProvider>\n//   )\n// }\n\n// export default InfoCoin;\nvar _c;\n$RefreshReg$(_c, \"InfoCoin\");","map":{"version":3,"names":["React","useState","useEffect","Chart","CryptoCompare","InfoCoin","coin","currency","_s","data","setData","chart","setChart","fetchData","response","getHistoricalData","limit","Data","createChart","ctx","document","getElementById","getContext","myChart","type","labels","map","d","time","datasets","label","close","length","_c","$RefreshReg$"],"sources":["C:/Curso/visualCodeProyectos/crypto-pagev1/crypto-pagev1/src/components/InfoCoin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Chart from 'chart.js'; //Librería de gráficos\r\nimport CryptoCompare from 'cryptocompare'; //API de CryptoCompare\r\n\r\nconst InfoCoin = ({ coin, currency }) => {\r\n  const [data, setData] = useState([]); //Almacena los datos de la API\r\n  const [chart, setChart] = useState(null); //Almacena la referencia al gráfico\r\n  \r\n  useEffect(() => {\r\n    // Carga los datos al renderizar el componente\r\n    const fetchData = async () => {\r\n      const response = await CryptoCompare.getHistoricalData(coin, currency, {\r\n        limit: 200, //Cantidad de puntos\r\n      });\r\n      setData(response.Data);\r\n    };\r\n    fetchData();\r\n  \r\n    // Crea el gráfico al renderizar el componente\r\n    const createChart = () => {\r\n      const ctx = document.getElementById('chart').getContext('2d');\r\n      const myChart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: data.map(d => d.time),\r\n          datasets: [{\r\n            label: coin,\r\n            data: data.map(d => d.close),\r\n          }],\r\n        },\r\n      });\r\n      setChart(myChart);\r\n    };\r\n  \r\n    if (data.length > 0) {\r\n      createChart();\r\n    }\r\n  \r\n  }, [data, coin, currency]);\r\n  \r\n\r\n};\r\n\r\nexport default InfoCoin;\r\n\r\n// import React, { useContext, useEffect, useState } from 'react'\r\n// import { Cripto } from '../ContextCripto';\r\n// import { HistoryChart } from '../config/api';\r\n// import { CircularProgress, LinearProgress, ThemeProvider, createTheme } from '@mui/material';\r\n// import { makeStyles } from '@mui/styles';\r\n\r\n// const InfoCoin = ({coin}) => {\r\n//   const [histData, setHistData] = useState();\r\n//   const [days, setDays] = useState(1);\r\n//   const { currency, symbol } = useContext(Cripto);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n\r\n//   const fetchHistoryData = async () => {\r\n//     setLoading(true); // Marcar como cargando antes de hacer la solicitud\r\n//     try {\r\n//       const response = await fetch(HistoryChart(coin.SYMBOL, days, currency));\r\n//       const data = await response.json();\r\n//       setHistData(data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching la data:', error);\r\n//       // Aquí puedes manejar el error de la manera que desees\r\n//     } finally {\r\n//       setLoading(false); // Marcar como no cargando después de la solicitud, independientemente del resultado\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchHistoryData();\r\n//     // eslint-disable-next-line\r\n//   }, [days, currency]);\r\n  \r\n//   const darkTheme = createTheme({\r\n//       palette: {\r\n//           primary: {\r\n//               main: \"#fff\",\r\n//       },\r\n//       type: \"dark\",\r\n//     },\r\n//   });\r\n//   const useStyles = makeStyles(() => ({\r\n//       container: {\r\n//       width: \"75%\",\r\n//       display: \"flex\",\r\n//       flexDirection: \"column\",\r\n//       alignItems: \"center\",\r\n//       justifyContent: \"center\",\r\n//       marginTop: 25,\r\n//       padding: 40,\r\n//     },\r\n//   }));\r\n\r\n//   const classes = useStyles\r\n\r\n//   console.log(histData)\r\n  \r\n\r\n//   return (\r\n//     <ThemeProvider theme={darkTheme}>\r\n//       <div className={classes.container}>\r\n//         {loading && <LinearProgress style={{ backgroundColor: \"rgb(0, 150, 250)\" }} />}\r\n//         {!histData ? (\r\n//           <CircularProgress style={{ color: \"rgb(0, 150, 250)\"}} size={250} thickness={1} />\r\n//         ) : (!histData.Data || !histData.Data.Data ? (\r\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\r\n//             <CircularProgress style={{ color: \"rgb(0, 150, 250)\" }} size={250} thickness={1} />\r\n//           </div>\r\n//         ) : (\r\n//           <div className={classes.lineChart}>\r\n//             <svg viewBox={`0 0 ${histData.Data.Data.length * 50} 300`}>\r\n//               <polyline\r\n//                 className={classes.line}\r\n//                 points={histData.Data.Data.map((coin, index) => `${ 50},${300}`).join(' ')}\r\n//               />\r\n//             </svg>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </ThemeProvider>\r\n//   )\r\n// }\r\n\r\n// export default InfoCoin;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,UAAU,CAAC,CAAC;AAC9B,OAAOC,aAAa,MAAM,eAAe,CAAC,CAAC;;AAE3C,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMV,aAAa,CAACW,iBAAiB,CAACT,IAAI,EAAEC,QAAQ,EAAE;QACrES,KAAK,EAAE,GAAG,CAAE;MACd,CAAC,CAAC;MACFN,OAAO,CAACI,QAAQ,CAACG,IAAI,CAAC;IACxB,CAAC;IACDJ,SAAS,CAAC,CAAC;;IAEX;IACA,MAAMK,WAAW,GAAGA,CAAA,KAAM;MACxB,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;MAC7D,MAAMC,OAAO,GAAG,IAAIpB,KAAK,CAACgB,GAAG,EAAE;QAC7BK,IAAI,EAAE,MAAM;QACZf,IAAI,EAAE;UACJgB,MAAM,EAAEhB,IAAI,CAACiB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;UAC7BC,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAExB,IAAI;YACXG,IAAI,EAAEA,IAAI,CAACiB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACI,KAAK;UAC7B,CAAC;QACH;MACF,CAAC,CAAC;MACFnB,QAAQ,CAACW,OAAO,CAAC;IACnB,CAAC;IAED,IAAId,IAAI,CAACuB,MAAM,GAAG,CAAC,EAAE;MACnBd,WAAW,CAAC,CAAC;IACf;EAEF,CAAC,EAAE,CAACT,IAAI,EAAEH,IAAI,EAAEC,QAAQ,CAAC,CAAC;AAG5B,CAAC;AAACC,EAAA,CArCIH,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AAuCd,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}